{"version":3,"sources":["app/config/index.js","app/services/firebase/firebase.services.js","app/services/firebase/auth.services.js","app/services/firebase/firestore.services.js","app/services/proxy.services.js","app/components/SEOSearchForm.js","app/components/SEOSearchResult.js","app/App.js","app/index.js","serviceWorker.js","index.js"],"names":["firebaseConfig","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","FirebaseContext","React","createContext","useFirebase","useContext","FirebaseProvider","children","useState","firebase","apps","length","app","initializeApp","Provider","value","AuthContext","AuthProvider","FirestoreContext","FirestoreProvider","firestore","ProxyContext","ProxyProvider","getSEOFromUrl","url","a","fetch","response","json","jsonData","jsonDataString","JSON","stringify","replace","parse","SEOSearchForm","searchResult","setUrl","handleSubmit","ev","preventDefault","result","className","onSubmit","type","onChange","target","SEOSearchResult","data","title","description","src","image","alt","App","seoResult","setSEOResult","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oQAAaA,EAAiB,CAC5BC,OAAQC,0CACRC,WAAYD,gCACZE,YAAaF,uCACbG,UAAWH,gBACXI,cAAeJ,4BACfK,kBAAmBL,eACnBM,MAAON,6CCFHO,EAAkBC,IAAMC,cAAc,MACtCC,EAAc,kBAAMC,qBAAWJ,IAE/BK,EAAmB,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACzBC,mBAAUC,IAASC,KAAKC,OAAkDF,IAASG,MAAlDH,IAASI,cAAcrB,IAA/DoB,EADgC,oBAGvC,OACE,kBAACX,EAAgBa,SAAjB,CAA0BC,MAAO,CAACH,QAC/BL,ICRDS,EAAcd,IAAMC,cAAc,MAGlCc,EAAe,SAAC,GAAgB,IAAfV,EAAc,EAAdA,SACLH,IAARQ,IAER,OACE,kBAACI,EAAYF,SAAb,CAAsBC,MAAO,IAC1BR,ICRDW,G,MAAmBhB,IAAMC,cAAc,OAGvCgB,EAAoB,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SACVH,IAARQ,IACOQ,YAEf,OACE,kBAACF,EAAiBJ,SAAlB,CAA2BC,MAAO,IAC/BR,ICZDc,EAAelB,0BAGfmB,EAAgB,SAAC,GAAgB,IAAff,EAAc,EAAdA,SAGhBgB,EAAa,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,sEACGC,MAAM,GAAD,OAHR,2DAGQ,OAAoBF,IAD5B,cACdG,EADc,gBAECA,EAASC,OAFV,cAEhBC,EAFgB,OAGdC,EAAiBC,KAAKC,UAAUH,GAAUI,QAAQ,UAAW,UACnEJ,EAAWE,KAAKG,MAAMJ,GAJF,kBAKbD,GALa,2CAAH,sDAQnB,OACE,kBAACR,EAAaP,SAAd,CAAuBC,MAAO,CAACQ,kBAC5BhB,ICQQ4B,MAvBf,YAAwC,IAAhBC,EAAe,EAAfA,aAAe,EACf5B,mBAAS,IADM,mBAC9BgB,EAD8B,KACzBa,EADyB,KAE9Bd,EDFqBlB,qBAAWgB,GCEhCE,cAEDe,EAAY,uCAAG,WAAOC,GAAP,eAAAd,EAAA,6DACnBc,EAAGC,iBADgB,SAGEjB,EAAcC,GAHhB,OAGbiB,EAHa,OAInBL,EAAaK,GAJM,2CAAH,sDAOlB,OACE,yBAAKC,UAAU,uBACb,yBAAKA,UAAU,mBACb,0BAAMC,SAAUL,GACd,2BAAOM,KAAK,OAAO7B,MAAOS,EAAKqB,SAAU,SAACN,GAAD,OAAQF,EAAOE,EAAGO,OAAO/B,UAClE,2BAAO6B,KAAK,SAAS7B,MAAM,4BCDtBgC,MAhBf,YAAkC,IAARC,EAAO,EAAPA,KACxB,OACE,yBAAKN,UAAU,qBACVM,EACD,yBAAKN,UAAU,IACb,4BAAKM,EAAKC,OACV,2BAAID,EAAKE,aACT,iCACE,yBAAKC,IAAKH,EAAKI,MAAOC,IAAKL,EAAKC,UAGpC,kBAAC,WAAD,QCgBOK,IC3BAA,EDIf,WAAgB,IAAD,EACqB9C,qBADrB,mBACN+C,EADM,KACKC,EADL,KAOb,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAeN,aAVA,SAACK,GAC1Be,EAAaf,MAUH,kBAAC,EAAD,CAAiBO,KAAMO,UERjBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9dff8c97.chunk.js","sourcesContent":["export const firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID\r\n};","import React, { useContext, useState } from 'react';\r\nimport firebase from 'firebase/app';\r\n\r\nimport { firebaseConfig } from '../../config';\r\n\r\nconst FirebaseContext = React.createContext(null);\r\nconst useFirebase = () => useContext(FirebaseContext);\r\n\r\nconst FirebaseProvider = ({children}) => {\r\n  const [app] = useState(!firebase.apps.length ? firebase.initializeApp(firebaseConfig) : firebase.app());\r\n\r\n  return (\r\n    <FirebaseContext.Provider value={{app}}>\r\n      {children}\r\n    </FirebaseContext.Provider>\r\n  )\r\n};\r\n\r\nexport {\r\n  FirebaseContext,\r\n  FirebaseProvider,\r\n  useFirebase,\r\n};\r\n","import { default as React, useContext, useState, useEffect } from 'react';\r\nimport 'firebase/auth';\r\n\r\nimport { useFirebase } from './firebase.services';\r\n\r\nconst AuthContext = React.createContext(null);\r\nconst useAuth = () => useContext(AuthContext);\r\n\r\nconst AuthProvider = ({children}) => {\r\n  const { app } = useFirebase();\r\n\r\n  return (\r\n    <AuthContext.Provider value={{}}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport {\r\n  AuthContext,\r\n  AuthProvider,\r\n  useAuth,\r\n};\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport 'firebase/firestore';\r\n\r\nimport { useFirebase } from './firebase.services';\r\n\r\nconst FirestoreContext = React.createContext(null);\r\nconst useFirestore = () => useContext(FirestoreContext);\r\n\r\nconst FirestoreProvider = ({children}) => {\r\n  const { app } = useFirebase();\r\n  const db = app.firestore();\r\n\r\n  return (\r\n    <FirestoreContext.Provider value={{}}>\r\n      {children}\r\n    </FirestoreContext.Provider>\r\n  );\r\n};\r\n\r\nexport {\r\n  FirestoreContext,\r\n  FirestoreProvider,\r\n  useFirestore,\r\n};","import React, { createContext, useContext } from 'react';\r\n\r\nconst ProxyContext = createContext();\r\nconst useProxyContext = () => useContext(ProxyContext);\r\n\r\nconst ProxyProvider = ({children}) => {\r\n  const PROXY_SEO_URL = 'https://nodejs-nmd-crawler.herokuapp.com/proxy/seo?url=';\r\n\r\n  const getSEOFromUrl = async (url) => {\r\n    const response = await fetch(`${PROXY_SEO_URL}${url}`);\r\n    let jsonData = await response.json();\r\n    const jsonDataString = JSON.stringify(jsonData).replace(/http:/gi, 'https:');\r\n    jsonData = JSON.parse(jsonDataString);\r\n    return jsonData;\r\n  };\r\n\r\n  return (\r\n    <ProxyContext.Provider value={{getSEOFromUrl}}>\r\n      {children}\r\n    </ProxyContext.Provider>\r\n  );\r\n};\r\n\r\nexport {\r\n  ProxyContext,\r\n  ProxyProvider,\r\n  useProxyContext,\r\n};\r\n","import React, { useState } from 'react';\r\nimport { useProxyContext } from '../services';\r\n\r\nfunction SEOSearchForm({searchResult}) {\r\n  const [url, setUrl] = useState('');\r\n  const {getSEOFromUrl} = useProxyContext();\r\n\r\n  const handleSubmit = async (ev) => {\r\n    ev.preventDefault();\r\n\r\n    const result = await getSEOFromUrl(url);\r\n    searchResult(result);\r\n  };\r\n\r\n  return (\r\n    <div className=\"row seo-search-form\">\r\n      <div className=\"col-12 col-lg-6\">\r\n        <form onSubmit={handleSubmit}>\r\n          <input type=\"text\" value={url} onChange={(ev) => setUrl(ev.target.value)} />\r\n          <input type=\"submit\" value=\"Get SEO Information\" />\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SEOSearchForm;\r\n","import React, { Fragment } from 'react';\r\n\r\nfunction SEOSearchResult({data}) {\r\n  return (\r\n    <div className=\"seo-search-result\">\r\n      {!!data\r\n      ? <div className=\"\">\r\n          <h1>{data.title}</h1>\r\n          <p>{data.description}</p>\r\n          <picture>\r\n            <img src={data.image} alt={data.title} />\r\n          </picture>\r\n        </div>\r\n      : <Fragment></Fragment>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SEOSearchResult;\r\n","import React, { useState } from 'react';\n\nimport './App.scss';\nimport { SEOSearchForm, SEOSearchResult } from './components';\nimport { AuthProvider, ProxyProvider, FirebaseProvider, FirestoreProvider } from './services';\n\nfunction App() {\n  const [seoResult, setSEOResult] = useState();\n\n  const handleSearchResult = (result) => {\n    setSEOResult(result);\n  };\n\n  return (\n    <div className=\"app\">\n      <FirebaseProvider>\n        <AuthProvider>\n          <FirestoreProvider>\n            <ProxyProvider>\n              <SEOSearchForm searchResult={handleSearchResult} />\n              <SEOSearchResult data={seoResult} />\n            </ProxyProvider>\n          </FirestoreProvider>\n        </AuthProvider>\n      </FirebaseProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import App from './App';\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}